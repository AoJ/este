Este - Google Closure based project boilerplate

What's that?
  It's my beloved development stack. Run one script, to compile Coffeescript,
  Stylus, Soy templates, update deps.js, run insanely fast unit tests, on file
  change (cmd-s). One console output for all these wonderful tools. Tested on
  mac and win.

How to use it?
  Install Node.js, Java, Python.
  npm install -g coffee-script
  npm install -g mocha
  npm install -g stylus
  Clone repository.
  Update Closure submodule.
    git submodule init
    git submodule update
  Ensure you know these Sublimetext packages:
    Package Control (must have)
    Clipboard History
    CoffeeScript
    JsFormat
    SoyTemplate
    Stylus
  Type 'node assets/js/dev/start app' in console from project root.
  Build something beautiful.

Scripts
  node assets/js/dev/start app
    - start simple server
    - watch and compile stylus styles
    - watch and compile soy templates
    - watch and compile coffee scripts
      - then run tests
      - then updates deps.js

  node assets/js/dev/build app
    - compile app
    - --debug, --deploy, --onlyhtml options (todo)

Ok. I got it, what's next?
  Take a look at the app. It does almost nothing. Just define app structure,
  namespacing (by features ftw), how component uses templates, custom events,
  compilation into one Ã¼ber small file. This is just the beginning. TodoMVC
  (mobile version) is in process. In the meantime, you can see what este.mvc
  namespace contains.

este.mvc
  Model, collection, simple router (todo: link to examples).
  Stay tunned for TodoMVC mobile and offline first edition.

Namespaces
  Namespaces in assets/js. App is obvious, dev are development scripts, este
  is my personal everything-i-consider-as-reusable library. You, or your
  company, should definitely have own persisted-shared-wisdom library too.

Near future
  Github project page
  Demos
  TodoMVC (mobile version)
  localization
  validations
  two-way databinding

Change Log
  06/30/12
    [improvement]
      start script
        refactored and speeded up
        documentation
        onfilechange unit testing is faster
        debug option, detail time durations for each command 
        deps.js is defined for all assets/js subdirectories
    [breaking]
      start script
        needs project parameter, ex. node assets/js/dev/start app
        

    [fix]
      start script compiles xy-template.html files on start
    [improvement]
      faster *.coffee compilation (closure desp are async now)






