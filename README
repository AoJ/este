Este - Google Closure-based project boilerplate

What's that?

  It's my beloved development stack. Run one script, to compile Coffeescript,
  Stylus, Soy templates, update deps.js, run insanely fast unit tests, on file
  change (cmd-s). One console output for all these wonderful tools. Tested on
  mac and win.

How to use it?

  Install Node.js, Java, Python.
  npm install -g coffee-script
  npm install -g mocha
  npm install -g stylus
  Clone repository.
  Update Closure submodule.
    git submodule init
    git submodule update
  Sublimetext install: todo
  Type 'node assets/js/dev/start' in console from project root.
  Build something beautiful.

Scripts

  node assets/js/dev/start app
    - start simple server, app.html as "index.html"
    - watch and compile stylus files
    - watch and compile soy templates
    - watch and compile coffee files
      - then updates deps.js
      - then run tests

  node assets/js/dev/build app
    - compile app
    - --one, --html, --stage options (todo)

Ok. I got it, what's next?

  Take a look at the app. It does almost nothing. Just define app structure,
  namespacing (by features ftw), how component uses templates, custom events,
  compilation into one Ã¼ber small file. This is just the beginning. TodoMVC
  (mobile version) is in process. In the meantime, you can see what este.mvc
  namespace contains.

este.mvc

  Model, collection, simple router (todo: link to examples). Wait for TodoMVC.

Namespaces

  Namespaces in assets/js. App is obvious, dev are development scripts, este
  is my personal everything-i-consider-as-reusable library. You, or your
  company, should definitely have own persisted-shared-wisdom library too.

Near future

  TodoMVC (mobile version)
  app localization
  neat validations
  two-way databinding

Change Log

  06/30/12
    [change] - start.js needs project parameter (same as build.js)
    [bugfix] start.js compiles xy-template.html files on start
    [improvement] faster *.coffee compilation (closure desp are async now)






