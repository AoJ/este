// Generated by CoffeeScript 1.3.3
/*
  node assets/js/dev/start

  todo
    deletion .css and .js ghost files after .styl and .coffee deletion
*/

var Command, clearScreen, endsWith, exec, fs, getPaths, getSoyCommand, http, i, path, pathModule, runCommands, runServer, soyPath, soyPaths, start, tests, watchOptions, watchPaths, _i, _len;

fs = require('fs');

exec = require('child_process').exec;

tests = require('./tests');

http = require('http');

pathModule = require('path');

watchOptions = {
  interval: 10
};

start = function() {
  var commands, key, onPathChange, value;
  runServer();
  fs.watchFile('app-template.html', watchOptions, function(curr, prev) {
    if (curr.mtime <= prev.mtime) {
      return;
    }
    return exec("node assets/js/dev/build app --html");
  });
  commands = (function() {
    var _results;
    _results = [];
    for (key in Command) {
      value = Command[key];
      _results.push(value);
    }
    return _results;
  })();
  runCommands(commands, function(success) {
    if (success) {
      console.log('ok');
    } else {
      console.log('error');
    }
    return watchPaths(onPathChange);
  });
  return onPathChange = function(path, dir) {
    if (dir) {
      watchPaths(onPathChange);
      return;
    }
    commands = null;
    switch (pathModule.extname(path)) {
      case '.coffee':
        commands = ["coffee --compile --bare " + path, Command.deps, Command.tests];
        break;
      case '.styl':
        commands = ["stylus --compress " + path];
        break;
      case '.soy':
        commands = [getSoyCommand(path)];
    }
    if (!commands) {
      return;
    }
    clearScreen();
    runCommands(commands);
  };
};

clearScreen = function() {
  process.stdout.write('\033[2J');
  return process.stdout.write('\033[1;3H');
};

watchPaths = function(callback) {
  var path, paths, _fn, _i, _len;
  paths = getPaths('assets');
  _fn = function(path) {
    if (path.indexOf('.') > -1) {
      return fs.watchFile(path, watchOptions, function(curr, prev) {
        if (curr.mtime > prev.mtime) {
          return callback(path, false);
        }
      });
    } else {
      return fs.watch(path, watchOptions, function() {
        return callback(path, true);
      });
    }
  };
  for (_i = 0, _len = paths.length; _i < _len; _i++) {
    path = paths[_i];
    if (watchPaths['$' + path]) {
      continue;
    }
    watchPaths['$' + path] = true;
    _fn(path);
  }
};

getPaths = function(directory) {
  var file, files, path, paths, stats, _i, _len;
  paths = [];
  files = fs.readdirSync(directory);
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    path = directory + '/' + file;
    if (path.indexOf('js/google-closure') > -1) {
      continue;
    }
    if (endsWith(path, '.DS_Store')) {
      continue;
    }
    if (endsWith(path, '.js')) {
      continue;
    }
    paths.push(path);
    stats = fs.statSync(path);
    if (stats.isDirectory()) {
      paths.push.apply(paths, getPaths(path));
    }
  }
  return paths;
};

endsWith = function(str, suffix) {
  var l;
  l = str.length - suffix.length;
  return l >= 0 && str.indexOf(suffix, l) === l;
};

runCommands = function(commands, callback) {
  var command, onExec;
  if (callback == null) {
    callback = function() {};
  }
  if (!commands.length) {
    callback(true);
    return;
  }
  command = commands[0];
  commands = commands.slice(1);
  onExec = function(err, stdout, stderr) {
    if (err) {
      console.log(stderr);
      callback(false);
      return;
    }
    return runCommands(commands, callback);
  };
  if (typeof command === 'function') {
    command(onExec);
  } else {
    exec(command, onExec);
  }
};

runServer = function() {
  var server;
  server = http.createServer(function(request, response) {
    var contentType, extname, filePath;
    filePath = '.' + request.url;
    if (filePath === './') {
      filePath = './app.htm';
    }
    if (filePath.indexOf('?') !== -1) {
      filePath = filePath.split('?')[0];
    }
    extname = pathModule.extname(filePath);
    contentType = 'text/html';
    switch (extname) {
      case '.js':
        contentType = 'text/javascript';
        break;
      case '.css':
        contentType = 'text/css';
        break;
      case '.png':
        contentType = 'image/png';
        break;
      case '.gif':
        contentType = 'image/gif';
    }
    return fs.exists(filePath, function(exists) {
      if (!exists) {
        filePath = './app.html';
      }
      return fs.readFile(filePath, function(error, content) {
        if (error) {
          response.writeHead(500);
          response.end('500', 'utf-8');
          return;
        }
        response.writeHead(200, {
          'Content-Type': contentType
        });
        return response.end(content, 'utf-8');
      });
    });
  });
  return server.listen(8000);
};

getSoyCommand = function(path) {
  return "java -jar assets/js/dev/SoyToJsSrcCompiler.jar    --shouldProvideRequireSoyNamespaces    --shouldGenerateJsdoc    --codeStyle concat    --outputPathFormat {INPUT_DIRECTORY}/{INPUT_FILE_NAME_NO_EXT}.js    " + path;
};

Command = {
  coffee: "coffee --compile --bare --output assets/js assets/js",
  deps: "python assets/js/google-closure/closure/bin/build/depswriter.py    --root_with_prefix=\"assets/js/google-closure ../../../google-closure\"    --root_with_prefix=\"assets/js/dev ../../../dev\"    --root_with_prefix=\"assets/js/este ../../../este\"    --root_with_prefix=\"assets/js/app ../../../app\"    > assets/js/deps.js",
  tests: tests.run,
  stylus: "stylus --compress assets/css/"
};

soyPaths = (function() {
  var _i, _len, _ref, _results;
  _ref = getPaths('assets');
  _results = [];
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    path = _ref[_i];
    if (endsWith(path, '.soy')) {
      _results.push(path);
    }
  }
  return _results;
})();

for (i = _i = 0, _len = soyPaths.length; _i < _len; i = ++_i) {
  soyPath = soyPaths[i];
  Command['soy' + i] = [getSoyCommand(soyPath)];
}

start();
