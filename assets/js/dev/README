What's that?
  It's my beloved development stack. Run one script, to compile Coffeescript,
  Stylus, Soy templates, update deps.js, run insanely fast unit tests, on file
  change (cmd-s). One console output for all these wonderful tools. Tested on
  mac and win.

How to use it
  Install Node.js, Java, Python.
  npm install -g mocha
  npm install -g stylus
  npm install -g coffee-script
  Clone.
  Update submodule to get last Closure Library version.
  Sublimetext install: todo
  type 'node assets/js/dev/start' in console from project root
  start creating something beautiful

Scripts
  node assets/js/dev/start
    - start simple server
    - watch and compile stylus files
    - watch and compile soy templates
    - watch and compile coffee files
      - then updates deps.js
      - then run tests

  node assets/js/dev/build app
    - compile app
    - --one, --html, --stage options (todo)

Ok. I got it, what's next?
  Take a look at the app. It does almost nothing. Just define app structure,
  namespacing (by features ftw), how component uses templates, custom events,
  compilation into one Ã¼ber small file. This is just the beginning. TodoMVC
  (mobile version) is in process. In the meantime, you can see what este.mvc namespace contains yet.

este.mvc
  Model, collection, simple router (todo: link to examples).

Namespaces
  Namespaces in assets/js. App is obvious, dev are development scripts, este
  is my personal everything-i-consider-as-reusable library. You, or your
  company, should definitely have own persisted-shared-wisdom library too.

Near future
  TodoMVC, mobile version ,)
  localization example
  validations
  two-way databinding


